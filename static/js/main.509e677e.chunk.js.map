{"version":3,"sources":["services/index.ts","services/Users/index.ts","i18n/locale/index.js","i18n/index.js","components/Board/utils.ts","components/Board/style.ts","components/Board/Board.tsx","hooks/useResize.ts","views/Home/components/Game/style.ts","views/Home/components/Game/Game.tsx","views/Home/components/Top/style.ts","views/Home/reducer.ts","views/Home/components/Top/Top.tsx","views/Home/Home.tsx","hooks/useCountDown.ts","App.tsx","serviceWorker.ts","index.tsx","services/Users/UsersProvider.tsx"],"names":["en","i18n","use","initReactI18next","init","resources","lng","getRandom","n","Math","floor","random","getRandomColor","hue","saturation","light","getRandomCoordinates","Base","styled","div","props","side","Line","Box","bg","selected","boxMargin","onClick","undefined","getSide","landscape","window","innerWidth","innerHeight","Board","cb","clickBox","level","difficult","useMemo","useState","baseSide","setBaseSide","color","setColor","coordinates","setCoordinates","useEffect","onResize","addEventListener","removeEventListener","grid","Array","from","map","e","boxSide","line","l","key","box","b","Container","Header","header","Title","h1","Game","count","click","t","useTranslation","Actions","NameInput","input","TableContainer","Table","ul","Row","li","sortUsers","a","score","Top","restart","top","useUsers","queryUsers","mutateUsers","users","setUsers","then","type","placeholder","onKeyUp","keyCode","preventDefault","user","name","target","value","newUsers","concat","length","i","splice","defaultState","fail","homeReducer","state","payload","continue","Home","seconds","setCount","timer","useRef","stopCount","useCallback","clearTimeout","current","restartCount","setTimeout","useCountDown","useReducer","dispatch","handleClick","success","handleRestart","className","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","defaultUserService","sortCb","Promise","resolve","reject","storage","localStorage","getItem","JSON","parse","sort","err","setItem","stringify","UsersContext","createContext","useContext","UsersProvider","children","Provider"],"mappings":"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","file":"static/js/main.509e677e.chunk.js","sourcesContent":["export * from './Users'\n","export { default } from './UsersProvider'\nexport { default as UsersProvider } from './UsersProvider'\nexport * from './UsersProvider'\nexport * from './types'\n","import en from \"./en.json\"\n\n\nexport default {\n    en\n};","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport resources from \"./locale\"\n\n\nexport default i18n\n    .use(initReactI18next)\n    .init({\n        resources,\n        lng: \"en\",\n    })","export const getRandom = (n = 1): number => Math.floor(Math.random() * n)\n\nexport const getRandomColor = (): string => {\n    const hue = getRandom(360)\n    const saturation = 25 + getRandom(70)\n    const light = 10 + getRandom(85)\n    return `hsl(${hue},${saturation}%, ${light}%)`\n}\n\nexport const getRandomCoordinates = (n = 1): [number, number] => [\n    getRandom(n),\n    getRandom(n),\n]\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst boxMargin = 2.5\nconst boxTotalMargin = boxMargin * 2\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n    side: number\n}\nexport const Base = styled.div<Props>`\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    width: ${(props) => props.side}px;\n    height: ${(props) => props.side}px;\n`\n\nexport const Line = styled.div<Props>`\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: ${(props) => props.side}px;\n`\n\ninterface BoxProps extends Props {\n    bg: string\n    selected?: boolean\n}\nexport const Box = styled.div<BoxProps>`\n    border-radius: 5px;\n    margin: ${boxMargin}px;\n    background-color: ${(props) => props.bg};\n    opacity: ${(props) => (props.selected ? 0.6 : 1)};\n    width: ${(props) => props.side - boxTotalMargin}px;\n    height: ${(props) => props.side - boxTotalMargin}px;\n    ${(props) =>\n        props.onClick\n            ? `\n        :hover {\n            cursor:pointer;\n        }\n    `\n            : undefined}\n`\n","import React, { useEffect, useState, useMemo } from 'react'\nimport { useResize } from 'hooks'\nimport { getRandomColor, getRandomCoordinates } from './utils'\nimport { Base, Line, Box } from './style'\n\nconst getSide = (side?: number) => {\n    const landscape = window.innerWidth > window.innerHeight\n    if (side) {\n        if (landscape) {\n            return side > window.innerHeight ? window.innerHeight : side\n        } else {\n            return side > window.innerWidth ? window.innerWidth : side\n        }\n    }\n\n    return landscape ? window.innerHeight : window.innerWidth\n}\n\ninterface Props {\n    clickBox: (success: boolean) => void\n    level?: number\n    side?: number\n}\nconst Board: React.FC<Props> = ({ clickBox, level = 1, side = 500 }) => {\n    const difficult = useMemo(() => (level < 2 ? 2 : level + 1), [level])\n    const [baseSide, setBaseSide] = useState(getSide(side))\n    const [color, setColor] = useState(getRandomColor())\n    const [coordinates, setCoordinates] = useState(\n        getRandomCoordinates(difficult)\n    )\n    useResize(() => setBaseSide(getSide(side)))\n\n    const grid = Array.from(Array(difficult)).map((e) =>\n        Array.from(Array(difficult))\n    )\n    const boxSide = baseSide / difficult\n\n    useEffect(() => {\n        setColor(getRandomColor())\n        setCoordinates(getRandomCoordinates(difficult))\n    }, [difficult])\n\n    return (\n        <Base side={baseSide}>\n            {grid.map((line, l) => (\n                <Line key={`l-${l}`} side={boxSide}>\n                    {line.map((box, b) => {\n                        const selected =\n                            l === coordinates[0] && b === coordinates[1]\n\n                        return (\n                            <Box\n                                key={`b-${b}`}\n                                side={boxSide}\n                                bg={color}\n                                selected={selected}\n                                onClick={() => clickBox(selected)}\n                            />\n                        )\n                    })}\n                </Line>\n            ))}\n        </Base>\n    )\n}\n\nexport default Board\n","import { useEffect } from 'react'\n\nexport function useResize(cb: () => void) {\n    useEffect(() => {\n        const onResize = () => {\n            cb()\n        }\n\n        window.addEventListener('resize', onResize)\n        return () => {\n            window.removeEventListener('resize', onResize)\n        }\n    }, [cb])\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const Header = styled.header`\n    width: 100%;\n`\n\nexport const Title = styled.h1`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 20px;\n`\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Board } from 'components'\nimport { Container, Header, Title } from './style'\n\ninterface Props {\n    level: number\n    count: number\n    click: (success: boolean) => void\n}\n\nconst Game: React.FC<Props> = ({ level, count, click }) => {\n    const { t } = useTranslation()\n\n    return (\n        <Container>\n            <Header>\n                <Title>\n                    <span>{`${t('level')} ${level}`}</span>\n                    <span>{count}s</span>\n                </Title>\n            </Header>\n            <div>\n                <Board level={level} clickBox={click} />\n            </div>\n        </Container>\n    )\n}\n\nexport default Game\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    max-width: 770px;\n    padding: 20px;\n`\n\nexport const Header = styled.header`\n    width: 100%;\n`\n\nexport const Title = styled.h1`\n    text-align: center;\n    padding: 0 20px;\n`\nexport const NameInput = styled.input`\n    width: 100%;\n    height: 40px;\n    padding: 0 20px;\n    box-sizing: border-box;\n`\n\nexport const TableContainer = styled.div`\n    margin-top: 50px;\n    width: 100%;\n`\n\nexport const Table = styled.ul`\n    list-style: none;\n    padding: 0;\n    width: 100%;\n`\nexport const Row = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px 20px;\n    :nth-child(even) {\n        background-color: #efefef;\n    }\n`\n","import { Reducer } from 'react'\n\nexport enum Actions {\n    continue,\n    fail,\n    restart,\n}\n\ninterface Action {\n    type: Actions\n    payload?: { [key: string]: any }\n}\n\ninterface HomeState {\n    level: number\n    fail: boolean\n}\n\nexport const defaultState: HomeState = {\n    level: 1,\n    fail: false,\n}\n\nexport const homeReducer: Reducer<HomeState, Action> = (\n    state = defaultState,\n    { type, payload }\n) => {\n    switch (type) {\n        case Actions.continue:\n            return {\n                ...state,\n                level: state.level + 1,\n            }\n\n        case Actions.fail:\n            return {\n                ...state,\n                fail: true,\n            }\n\n        case Actions.restart:\n            return {\n                ...defaultState,\n            }\n\n        default:\n            return state\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useUsers, User } from 'services'\nimport {\n    Container,\n    Header,\n    Title,\n    NameInput,\n    TableContainer,\n    Table,\n    Row,\n} from './style'\n\nconst sortUsers = (a: User, b: User) => b.score - a.score\n\ninterface Props {\n    score: number\n    restart: () => void\n    top?: number\n}\nexport const Top: React.FC<Props> = ({ score, restart, top = 10 }) => {\n    const { t } = useTranslation()\n    const { queryUsers, mutateUsers } = useUsers()\n    const [users, setUsers] = useState<User[]>()\n\n    useEffect(() => {\n        queryUsers(sortUsers).then((users: User[]) => {\n            setUsers(users)\n        })\n    }, [queryUsers])\n\n    if (users) {\n        const submitName = (e: React.KeyboardEvent<HTMLInputElement>) => {\n            const enterKey = 13\n            if (e.keyCode === enterKey) {\n                e.preventDefault()\n                const user = {\n                    name: (e.target as HTMLInputElement).value,\n                    score,\n                }\n                const newUsers = users.concat([user])\n\n                mutateUsers(newUsers).then(() => {\n                    restart()\n                })\n            }\n        }\n\n        return (\n            <Container>\n                <Header>\n                    <Title>{t('game_over')}</Title>\n                    <NameInput\n                        type=\"text\"\n                        placeholder={t('user_name-placeholder')}\n                        onKeyUp={submitName}\n                    />\n                </Header>\n\n                {users.length ? (\n                    <TableContainer>\n                        <Title>{t('hall_of_fame')}</Title>\n                        <Table>\n                            {users\n                                .map((user, i) => (\n                                    <Row key={i}>\n                                        <span>{user.name}</span>{' '}\n                                        <span>{user.score}</span>\n                                    </Row>\n                                ))\n                                .splice(0, top)}\n                        </Table>\n                    </TableContainer>\n                ) : null}\n            </Container>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Top\n","import React, { useReducer, useEffect, useCallback } from 'react'\nimport { useCountDown } from 'hooks'\nimport { UsersProvider } from 'services'\nimport { Game, Top } from './components'\nimport { Actions, homeReducer, defaultState } from './reducer'\nimport './Home.css'\n\nconst timeLimit = 3\n\nconst Home: React.FC = () => {\n    const { count, stopCount, restartCount } = useCountDown(timeLimit)\n    const [{ level, fail }, dispatch] = useReducer(homeReducer, defaultState)\n\n    useEffect(() => {\n        if (!count) {\n            dispatch({ type: Actions.fail })\n        }\n    }, [count])\n\n    const handleClick = useCallback(\n        (success: boolean) => {\n            let type: Actions\n            if (success) {\n                type = Actions.continue\n                restartCount()\n            } else {\n                type = Actions.fail\n                stopCount()\n            }\n\n            dispatch({ type })\n        },\n        [stopCount, restartCount]\n    )\n\n    const handleRestart = useCallback(() => {\n        restartCount()\n        dispatch({ type: Actions.restart })\n    }, [restartCount])\n\n    return (\n        <section className=\"home\">\n            {fail ? (\n                <UsersProvider>\n                    <Top score={level} restart={handleRestart} />\n                </UsersProvider>\n            ) : (\n                <Game {...{ level, count, click: handleClick }} />\n            )}\n        </section>\n    )\n}\n\nexport default Home\n","import { useEffect, useState, useRef, useCallback } from 'react'\n\nexport function useCountDown(seconds: number = 60) {\n    const [count, setCount] = useState(seconds)\n    const timer = useRef(0)\n\n    const stopCount = useCallback(() => {\n        clearTimeout(timer.current)\n    }, [])\n\n    const restartCount = useCallback(() => {\n        setCount(seconds)\n    }, [seconds])\n\n    useEffect(() => {\n        timer.current = setTimeout(() => {\n            setCount(count - 1)\n        }, 1000)\n\n        if (!count) {\n            stopCount()\n        } else {\n            return () => stopCount()\n        }\n    }, [count, stopCount])\n\n    return {\n        count,\n        stopCount,\n        restartCount,\n    }\n}\n","import React from 'react'\nimport { Home } from './views'\n\nfunction App() {\n    return (\n        <main className=\"app\">\n            <Home />\n        </main>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'i18n'\nimport 'styles/main.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { createContext, useContext } from 'react'\nimport { User, usersProvider, sortCallback } from './types'\n\nconst usersKey = 'users'\n\nconst queryUsers = (sortCb?: sortCallback) => {\n    return new Promise<User[]>((resolve, reject) => {\n        try {\n            let users = []\n            const storage = window.localStorage.getItem(usersKey)\n            if (storage) {\n                users = sortCb\n                    ? JSON.parse(storage).sort(sortCb)\n                    : JSON.parse(storage)\n            }\n            resolve(users)\n        } catch (err) {\n            reject(err)\n        }\n    })\n}\n\nconst mutateUsers = (users: User[]) => {\n    return new Promise<void>((resolve, reject) => {\n        try {\n            window.localStorage.setItem(usersKey, JSON.stringify(users))\n            resolve()\n        } catch (err) {\n            reject(err)\n        }\n    })\n}\n\nconst defaultUserService = {\n    queryUsers,\n    mutateUsers,\n}\n\nconst UsersContext = createContext<usersProvider>(defaultUserService)\n\nexport const useUsers = () => {\n    return useContext(UsersContext)\n}\n\nexport const UsersProvider: React.FC = ({ children }) => (\n    <UsersContext.Provider value={defaultUserService}>\n        {children}\n    </UsersContext.Provider>\n)\n\nexport default UsersProvider\n"],"sourceRoot":""}